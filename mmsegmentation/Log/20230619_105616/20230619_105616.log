2023/06/19 10:56:17 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.16 (main, May 15 2023, 23:46:34) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 42
    GPU 0,1,2,3,4: GeForce RTX 2080 Ti
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 10.1, V10.1.10
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.12.1+cu102
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1+cu102
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 42
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/19 10:56:18 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(64, 64))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'WatermenlonDataset'
data_root = './project/dataset/Watermelon87_Semantic_Seg_Mask/'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(64, 64), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='WatermenlonDataset',
        data_root='./project/dataset/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(64, 64), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WatermenlonDataset',
        data_root='./project/dataset/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WatermenlonDataset',
        data_root='./project/dataset/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=3000, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=1, max_keep_ckpts=3, save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './project/work_dirs/Watermelon'
randomness = dict(seed=42)

2023/06/19 10:56:25 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/19 10:56:25 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/19 10:56:26 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/19 10:56:27 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/19 10:56:27 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/19 10:56:28 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([6, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([6, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/19 10:56:28 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/19 10:56:28 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/19 10:56:28 - mmengine - INFO - Checkpoints will be saved to /home/disk/ltb/OpenMMLab/MMSegmentation/mmsegmentation/project/work_dirs/Watermelon.
2023/06/19 10:56:36 - mmengine - INFO - Exp name: pspnet-Watermelon_20230618_20230619_105616
2023/06/19 10:56:36 - mmengine - INFO - Iter(train) [   6/3000]  lr: 9.9989e-03  eta: 1:00:32  time: 1.2133  data_time: 0.0081  memory: 5948  loss: 0.1517  decode.loss_ce: 0.1059  decode.acc_seg: 37.0636  aux.loss_ce: 0.0458  aux.acc_seg: 33.7006
2023/06/19 10:57:28 - mmengine - INFO - Iter(train) [ 100/3000]  lr: 9.9779e-03  eta: 0:28:47  time: 0.5555  data_time: 0.0081  memory: 3775  loss: 0.0725  decode.loss_ce: 0.0493  decode.acc_seg: 85.9985  aux.loss_ce: 0.0232  aux.acc_seg: 79.8737
2023/06/19 10:58:23 - mmengine - INFO - Iter(train) [ 200/3000]  lr: 9.9557e-03  eta: 0:26:50  time: 0.5589  data_time: 0.0081  memory: 3775  loss: 0.0678  decode.loss_ce: 0.0491  decode.acc_seg: 61.2396  aux.loss_ce: 0.0187  aux.acc_seg: 69.8303
2023/06/19 10:59:19 - mmengine - INFO - Iter(train) [ 300/3000]  lr: 9.9334e-03  eta: 0:25:35  time: 0.5512  data_time: 0.0080  memory: 3775  loss: 0.0512  decode.loss_ce: 0.0356  decode.acc_seg: 75.2411  aux.loss_ce: 0.0156  aux.acc_seg: 68.4540
2023/06/19 11:00:14 - mmengine - INFO - Iter(train) [ 400/3000]  lr: 9.9111e-03  eta: 0:24:29  time: 0.5508  data_time: 0.0079  memory: 3775  loss: 0.0608  decode.loss_ce: 0.0418  decode.acc_seg: 86.5753  aux.loss_ce: 0.0190  aux.acc_seg: 84.8450
2023/06/19 11:00:29 - mmengine - INFO - per class results:
2023/06/19 11:00:29 - mmengine - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 59.3 | 99.86 |
|    red     | 1.25 |  1.25 |
|   green    | 0.32 |  0.32 |
|   white    | 4.59 |  4.62 |
| seed-black | 3.88 |  3.9  |
| seed-white | 0.0  |  0.0  |
+------------+------+-------+
2023/06/19 11:00:29 - mmengine - INFO - Iter(val) [11/11]    aAcc: 59.5700  mIoU: 11.5600  mAcc: 18.3300  data_time: 0.0306  time: 1.3517
2023/06/19 11:00:30 - mmengine - INFO - The best checkpoint with 59.5700 aAcc at 0 epoch is saved to best_aAcc_epoch_0.pth.
2023/06/19 11:01:26 - mmengine - INFO - Iter(train) [ 500/3000]  lr: 9.8888e-03  eta: 0:23:34  time: 0.5553  data_time: 0.0080  memory: 4433  loss: 0.0477  decode.loss_ce: 0.0332  decode.acc_seg: 85.4797  aux.loss_ce: 0.0145  aux.acc_seg: 82.1167
2023/06/19 11:02:22 - mmengine - INFO - Iter(train) [ 600/3000]  lr: 9.8665e-03  eta: 0:22:34  time: 0.5571  data_time: 0.0077  memory: 3775  loss: 0.0446  decode.loss_ce: 0.0312  decode.acc_seg: 86.4288  aux.loss_ce: 0.0135  aux.acc_seg: 86.7249
2023/06/19 11:03:05 - mmengine - INFO - Iter(train) [ 700/3000]  lr: 9.8442e-03  eta: 0:20:56  time: 0.5584  data_time: 0.0077  memory: 3775  loss: 0.0660  decode.loss_ce: 0.0467  decode.acc_seg: 64.1998  aux.loss_ce: 0.0194  aux.acc_seg: 61.8164
2023/06/19 11:04:02 - mmengine - INFO - Iter(train) [ 800/3000]  lr: 9.8218e-03  eta: 0:20:05  time: 0.5643  data_time: 0.0078  memory: 3775  loss: 0.0495  decode.loss_ce: 0.0343  decode.acc_seg: 80.3314  aux.loss_ce: 0.0151  aux.acc_seg: 76.6083
2023/06/19 11:04:06 - mmengine - INFO - per class results:
2023/06/19 11:04:06 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 59.82 | 99.06 |
|    red     |  3.81 |  3.83 |
|   green    |  1.68 |  1.82 |
|   white    | 14.89 | 14.91 |
| seed-black |  9.75 |  9.8  |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 11:04:06 - mmengine - INFO - Iter(val) [11/11]    aAcc: 60.6200  mIoU: 14.9900  mAcc: 21.5700  data_time: 0.0086  time: 0.3765
2023/06/19 11:04:06 - mmengine - INFO - The previous best checkpoint /home/disk/ltb/OpenMMLab/MMSegmentation/mmsegmentation/project/work_dirs/Watermelon/best_aAcc_epoch_0.pth is removed
2023/06/19 11:04:07 - mmengine - INFO - The best checkpoint with 60.6200 aAcc at 0 epoch is saved to best_aAcc_epoch_0.pth.
2023/06/19 11:05:03 - mmengine - INFO - Iter(train) [ 900/3000]  lr: 9.7995e-03  eta: 0:19:16  time: 0.5626  data_time: 0.0087  memory: 3775  loss: 0.0423  decode.loss_ce: 0.0299  decode.acc_seg: 81.2195  aux.loss_ce: 0.0124  aux.acc_seg: 79.8615
2023/06/19 11:05:59 - mmengine - INFO - Exp name: pspnet-Watermelon_20230618_20230619_105616
2023/06/19 11:05:59 - mmengine - INFO - Iter(train) [1000/3000]  lr: 9.7772e-03  eta: 0:18:23  time: 0.5576  data_time: 0.0082  memory: 3775  loss: 0.0463  decode.loss_ce: 0.0331  decode.acc_seg: 89.9109  aux.loss_ce: 0.0132  aux.acc_seg: 89.2029
2023/06/19 11:06:55 - mmengine - INFO - Iter(train) [1100/3000]  lr: 9.7549e-03  eta: 0:17:29  time: 0.5573  data_time: 0.0084  memory: 3775  loss: 0.0463  decode.loss_ce: 0.0325  decode.acc_seg: 78.8574  aux.loss_ce: 0.0138  aux.acc_seg: 72.7814
2023/06/19 11:07:50 - mmengine - INFO - Iter(train) [1200/3000]  lr: 9.7325e-03  eta: 0:16:34  time: 0.5545  data_time: 0.0083  memory: 3775  loss: 0.0438  decode.loss_ce: 0.0309  decode.acc_seg: 79.6356  aux.loss_ce: 0.0129  aux.acc_seg: 81.3995
2023/06/19 11:07:54 - mmengine - INFO - per class results:
2023/06/19 11:07:54 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 69.82 | 99.05 |
|    red     | 49.21 | 50.41 |
|   green    |  2.24 |  2.27 |
|   white    | 29.66 |  30.6 |
| seed-black |  42.0 | 45.88 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 11:07:54 - mmengine - INFO - Iter(val) [11/11]    aAcc: 74.3200  mIoU: 32.1600  mAcc: 38.0300  data_time: 0.0086  time: 0.3707
2023/06/19 11:07:54 - mmengine - INFO - The previous best checkpoint /home/disk/ltb/OpenMMLab/MMSegmentation/mmsegmentation/project/work_dirs/Watermelon/best_aAcc_epoch_0.pth is removed
2023/06/19 11:07:56 - mmengine - INFO - The best checkpoint with 74.3200 aAcc at 0 epoch is saved to best_aAcc_epoch_0.pth.
2023/06/19 11:08:51 - mmengine - INFO - Iter(train) [1300/3000]  lr: 9.7102e-03  eta: 0:15:41  time: 0.5577  data_time: 0.0076  memory: 3775  loss: 0.0501  decode.loss_ce: 0.0356  decode.acc_seg: 89.6271  aux.loss_ce: 0.0145  aux.acc_seg: 88.2080
2023/06/19 11:09:47 - mmengine - INFO - Iter(train) [1400/3000]  lr: 9.6878e-03  eta: 0:14:46  time: 0.5534  data_time: 0.0078  memory: 3775  loss: 0.0358  decode.loss_ce: 0.0249  decode.acc_seg: 78.5522  aux.loss_ce: 0.0109  aux.acc_seg: 76.5686
2023/06/19 11:10:42 - mmengine - INFO - Iter(train) [1500/3000]  lr: 9.6655e-03  eta: 0:13:51  time: 0.5557  data_time: 0.0078  memory: 3775  loss: 0.0272  decode.loss_ce: 0.0187  decode.acc_seg: 94.3115  aux.loss_ce: 0.0085  aux.acc_seg: 91.8793
2023/06/19 11:11:38 - mmengine - INFO - Iter(train) [1600/3000]  lr: 9.6431e-03  eta: 0:12:55  time: 0.5591  data_time: 0.0088  memory: 3775  loss: 0.0456  decode.loss_ce: 0.0318  decode.acc_seg: 75.9735  aux.loss_ce: 0.0138  aux.acc_seg: 71.1517
2023/06/19 11:11:42 - mmengine - INFO - per class results:
2023/06/19 11:11:42 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 72.25 | 97.76 |
|    red     | 55.34 | 58.68 |
|   green    | 16.93 | 18.44 |
|   white    | 31.07 | 31.28 |
| seed-black | 43.49 | 44.05 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 11:11:42 - mmengine - INFO - Iter(val) [11/11]    aAcc: 76.9100  mIoU: 36.5100  mAcc: 41.7000  data_time: 0.0086  time: 0.3647
2023/06/19 11:11:42 - mmengine - INFO - The previous best checkpoint /home/disk/ltb/OpenMMLab/MMSegmentation/mmsegmentation/project/work_dirs/Watermelon/best_aAcc_epoch_0.pth is removed
2023/06/19 11:11:43 - mmengine - INFO - The best checkpoint with 76.9100 aAcc at 0 epoch is saved to best_aAcc_epoch_0.pth.
2023/06/19 11:12:39 - mmengine - INFO - Iter(train) [1700/3000]  lr: 9.6207e-03  eta: 0:12:01  time: 0.5596  data_time: 0.0075  memory: 3775  loss: 0.0368  decode.loss_ce: 0.0257  decode.acc_seg: 86.8347  aux.loss_ce: 0.0110  aux.acc_seg: 84.7137
2023/06/19 11:13:35 - mmengine - INFO - Iter(train) [1800/3000]  lr: 9.5983e-03  eta: 0:11:06  time: 0.5603  data_time: 0.0085  memory: 3775  loss: 0.0423  decode.loss_ce: 0.0296  decode.acc_seg: 88.5193  aux.loss_ce: 0.0126  aux.acc_seg: 86.7035
2023/06/19 11:14:30 - mmengine - INFO - Iter(train) [1900/3000]  lr: 9.5760e-03  eta: 0:10:10  time: 0.5570  data_time: 0.0076  memory: 3775  loss: 0.0400  decode.loss_ce: 0.0278  decode.acc_seg: 89.7919  aux.loss_ce: 0.0122  aux.acc_seg: 88.1958
2023/06/19 11:15:26 - mmengine - INFO - Exp name: pspnet-Watermelon_20230618_20230619_105616
2023/06/19 11:15:26 - mmengine - INFO - Iter(train) [2000/3000]  lr: 9.5536e-03  eta: 0:09:15  time: 0.5563  data_time: 0.0081  memory: 3775  loss: 0.0389  decode.loss_ce: 0.0272  decode.acc_seg: 93.0634  aux.loss_ce: 0.0117  aux.acc_seg: 89.7552
2023/06/19 11:15:30 - mmengine - INFO - per class results:
2023/06/19 11:15:30 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 65.96 | 97.66 |
|    red     | 33.38 | 34.05 |
|   green    |  9.9  | 11.47 |
|   white    | 35.91 | 36.12 |
| seed-black | 19.26 |  19.4 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 11:15:30 - mmengine - INFO - Iter(val) [11/11]    aAcc: 70.0000  mIoU: 27.4000  mAcc: 33.1200  data_time: 0.0090  time: 0.3679
2023/06/19 11:16:25 - mmengine - INFO - Iter(train) [2100/3000]  lr: 9.5312e-03  eta: 0:08:19  time: 0.5520  data_time: 0.0075  memory: 3775  loss: 0.0397  decode.loss_ce: 0.0274  decode.acc_seg: 67.9199  aux.loss_ce: 0.0123  aux.acc_seg: 69.0643
2023/06/19 11:17:19 - mmengine - INFO - Iter(train) [2200/3000]  lr: 9.5088e-03  eta: 0:07:23  time: 0.4109  data_time: 0.0073  memory: 3775  loss: 0.0393  decode.loss_ce: 0.0277  decode.acc_seg: 96.0938  aux.loss_ce: 0.0117  aux.acc_seg: 95.6940
2023/06/19 11:18:15 - mmengine - INFO - Iter(train) [2300/3000]  lr: 9.4864e-03  eta: 0:06:28  time: 0.5592  data_time: 0.0081  memory: 3775  loss: 0.0361  decode.loss_ce: 0.0251  decode.acc_seg: 80.6335  aux.loss_ce: 0.0110  aux.acc_seg: 76.7731
2023/06/19 11:19:10 - mmengine - INFO - Iter(train) [2400/3000]  lr: 9.4640e-03  eta: 0:05:32  time: 0.5507  data_time: 0.0074  memory: 3775  loss: 0.0376  decode.loss_ce: 0.0259  decode.acc_seg: 85.9467  aux.loss_ce: 0.0117  aux.acc_seg: 83.8379
2023/06/19 11:19:14 - mmengine - INFO - per class results:
2023/06/19 11:19:14 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 74.58 | 95.35 |
|    red     |  61.5 | 64.89 |
|   green    | 26.04 | 31.39 |
|   white    | 60.15 | 64.89 |
| seed-black | 18.09 | 18.12 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 11:19:14 - mmengine - INFO - Iter(val) [11/11]    aAcc: 80.1700  mIoU: 40.0600  mAcc: 45.7700  data_time: 0.0092  time: 0.3747
2023/06/19 11:19:14 - mmengine - INFO - The previous best checkpoint /home/disk/ltb/OpenMMLab/MMSegmentation/mmsegmentation/project/work_dirs/Watermelon/best_aAcc_epoch_0.pth is removed
2023/06/19 11:19:16 - mmengine - INFO - The best checkpoint with 80.1700 aAcc at 0 epoch is saved to best_aAcc_epoch_0.pth.
2023/06/19 11:20:11 - mmengine - INFO - Iter(train) [2500/3000]  lr: 9.4416e-03  eta: 0:04:37  time: 0.5563  data_time: 0.0083  memory: 3775  loss: 0.0375  decode.loss_ce: 0.0269  decode.acc_seg: 77.2247  aux.loss_ce: 0.0106  aux.acc_seg: 77.0020
2023/06/19 11:21:07 - mmengine - INFO - Iter(train) [2600/3000]  lr: 9.4191e-03  eta: 0:03:42  time: 0.5502  data_time: 0.0078  memory: 3775  loss: 0.0306  decode.loss_ce: 0.0213  decode.acc_seg: 88.1805  aux.loss_ce: 0.0092  aux.acc_seg: 87.6801
2023/06/19 11:22:02 - mmengine - INFO - Iter(train) [2700/3000]  lr: 9.3967e-03  eta: 0:02:46  time: 0.5555  data_time: 0.0072  memory: 3775  loss: 0.0318  decode.loss_ce: 0.0221  decode.acc_seg: 89.6271  aux.loss_ce: 0.0097  aux.acc_seg: 87.6617
2023/06/19 11:22:58 - mmengine - INFO - Iter(train) [2800/3000]  lr: 9.3743e-03  eta: 0:01:51  time: 0.5568  data_time: 0.0086  memory: 3775  loss: 0.0346  decode.loss_ce: 0.0241  decode.acc_seg: 87.9578  aux.loss_ce: 0.0105  aux.acc_seg: 87.0789
2023/06/19 11:23:02 - mmengine - INFO - per class results:
2023/06/19 11:23:02 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 70.68 | 96.45 |
|    red     | 46.34 | 47.41 |
|   green    | 22.21 | 27.39 |
|   white    | 56.79 | 60.46 |
| seed-black | 53.69 | 57.08 |
| seed-white |  4.19 |  4.19 |
+------------+-------+-------+
2023/06/19 11:23:02 - mmengine - INFO - Iter(val) [11/11]    aAcc: 75.8200  mIoU: 42.3200  mAcc: 48.8300  data_time: 0.0099  time: 0.3741
2023/06/19 11:23:58 - mmengine - INFO - Iter(train) [2900/3000]  lr: 9.3518e-03  eta: 0:00:55  time: 0.5572  data_time: 0.0082  memory: 3775  loss: 0.0409  decode.loss_ce: 0.0293  decode.acc_seg: 89.0625  aux.loss_ce: 0.0116  aux.acc_seg: 89.6027
2023/06/19 11:24:53 - mmengine - INFO - Exp name: pspnet-Watermelon_20230618_20230619_105616
2023/06/19 11:24:53 - mmengine - INFO - Iter(train) [3000/3000]  lr: 9.3294e-03  eta: 0:00:00  time: 0.5581  data_time: 0.0077  memory: 3775  loss: 0.0350  decode.loss_ce: 0.0248  decode.acc_seg: 90.0055  aux.loss_ce: 0.0102  aux.acc_seg: 87.5671
2023/06/19 11:24:53 - mmengine - INFO - Saving checkpoint at 1 epochs
